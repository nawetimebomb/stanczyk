// ;;  The Stańczyk Programming Language  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
// ;                                                                      ;
// ;            ¿«fº"└└-.`└└*∞▄_              ╓▄∞╙╙└└└╙╙*▄▄               ;
// ;         J^. ,▄▄▄▄▄▄_      └▀████▄ç    JA▀            └▀v             ;
// ;       ,┘ ▄████████████▄¿     ▀██████▄▀└      ╓▄██████▄¿ "▄_          ;
// ;      ,─╓██▀└└└╙▀█████████      ▀████╘      ▄████████████_`██▄        ;
// ;     ;"▄█└      ,██████████-     ▐█▀      ▄███████▀▀J█████▄▐▀██▄      ;
// ;     ▌█▀      _▄█▀▀█████████      █      ▄██████▌▄▀╙     ▀█▐▄,▀██▄    ;
// ;    ▐▄▀     A└-▀▌  █████████      ║     J███████▀         ▐▌▌╙█µ▀█▄   ;
// ;  A╙└▀█∩   [    █  █████████      ▌     ███████H          J██ç ▀▄╙█_  ;
// ; █    ▐▌    ▀▄▄▀  J█████████      H    ████████          █    █  ▀▄▌  ;
// ;  ▀▄▄█▀.          █████████▌           ████████          █ç__▄▀ ╓▀└╙%_;
// ;                 ▐█████████      ▐    J████████▌          .└╙   █¿  ,▌;
// ;                 █████████▀╙╙█▌└▐█╙└██▀▀████████                 ╙▀▀▀ ;
// ;                ▐██▀┘Å▀▄A └▓█╓▐█▄▄██▄J▀@└▐▄Å▌▀██▌                     ;
// ;                █▄▌▄█M╨╙└└-           .└└▀**▀█▄,▌                     ;
// ;                ²▀█▄▄L_                  _J▄▄▄█▀└                     ;
// ;                     └╙▀▀▀▀▀MMMR████▀▀▀▀▀▀▀└                          ;
// ;                                                                      ;
// ;                                                                      ;
// ; ███████╗████████╗ █████╗ ███╗   ██╗ ██████╗███████╗██╗   ██╗██╗  ██╗ ;
// ; ██╔════╝╚══██╔══╝██╔══██╗████╗  ██║██╔════╝╚══███╔╝╚██╗ ██╔╝██║ ██╔╝ ;
// ; ███████╗   ██║   ███████║██╔██╗ ██║██║       ███╔╝  ╚████╔╝ █████╔╝  ;
// ; ╚════██║   ██║   ██╔══██║██║╚██╗██║██║      ███╔╝    ╚██╔╝  ██╔═██╗  ;
// ; ███████║   ██║   ██║  ██║██║ ╚████║╚██████╗███████╗   ██║   ██║  ██╗ ;
// ; ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ;
// ;                                                                      ;
// ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  The Stańczyk Programming Language  ;;

// The Stańczyk Runtime Library
// Note: The Runtime library is automatically loaded into any program created
// with Stańczyk by the compiler.

// Maximum Values for Signed Integers (int)
const MAX_INT8  int 127 ;
const MAX_INT16 int 32_767 ;
const MAX_INT32 int 2_147_483_647 ;
const MAX_INT64 int 9_223_372_036_854_775_807 ;

// Minimum Values for Signed Integers (int)
const MIN_INT8  int -128 ;
const MIN_INT16 int -32_768 ;
const MIN_INT32 int -2_147_483_648 ;
const MIN_INT64 int -9_223_372_036_854_775_808 ;

// Maximum Values for Unsigned Integers (uint).
// TODO: Add them back when we support uint again
// const MAX_UINT8  uint 255u ;
// const MAX_UINT16 uint 65_535u ;
// const MAX_UINT32 uint 4_294_967_295u ;
// const MAX_UINT64 uint 18_446_744_073_709_551_615u ;

// Removes one value from the stack
// Calling
//   - <any value> drop
fn drop (any) let x in end ;

// Removes two values from the stack
// Calling
//   - <any> <any> 2drop
fn 2drop (any any) let x y in end ;

// Removes the second to last value from the stack
// Calling:
//		- <arg1> <arg2> nip
// Returns
//		- The second given argument (<arg2>)
fn nip (x y --- y) let x y in y end ;

// Duplicate the last value on the stack
// Calling:
//   - <any> dup
// Returns:
//   - The given argument, twice
fn dup (x --- x x) let x in x x end ;

// Duplicate the last 2 values on the stack
// Calling:
//   - <arg1> <arg2> 2dup
// Returns:
//   - The 2 given arguments, twice
fn 2dup (x y --- x y x y) let x y in x y x y end ;

// Duplicates the second to last value on the stack and add it at the end
// Calling:
//   - <arg1> <arg2> over
// Returns:
//   - The given arguments, plus <arg1> duplicated at the end (<arg1> <arg2> <arg1>)
fn over (x y --- x y x) let x y in x y x end ;

// Takes the last three values of the stack and rotates, moving the third one to the top.
// Calling:
//   - <arg1> <arg2> <arg3> rot
// Returns:
//   - The following order: <arg2> <arg3> <arg1>
fn rot (x y z --- y z x) let x y z in y z x end ;

// Takes the last three values of the stack and rotates, moving the first one to the bottom.
// Calling:
//   - <arg1> <arg2> <arg3> -rot
// Returns:
//   - The following order: <arg3> <arg1> <arg2>
fn -rot (x y z --- z x y) let x y z in z x y end ;

// Takes the last two values in the stack and swap them in order
// Calling:
//   - <arg1> <arg2> swap
// Returns:
//   - The given argument in opposite order (<arg2> <arg1>)
fn swap (x y --- y x) let x y in y x end ;

// Takes the last value from the stack and push it back so it can be used in special cases
// Calling:
//   - <arg> take
// Returns:
//   - Same <arg>
fn take (x --- x) let x in x end ;

// Duplicates the last value on the data stack and swap the other values
// Calling:
//   - <arg1> <arg2> swap
// Returns:
//   - Last stack data dupped and swap the previous two (<arg2> <arg1> <arg2>)
fn tuck (x y --- y x y) let x y in y x y end ;

fn len (string --- int) let s in 0 0 dup s get-byte != do 1 + dup s get-byte 0 != loop end ;

fn len (int --- int) 0 swap for x in take 0 > do 1 + x 10 / loop ;

fn ? (bool x x --- x) rot if drop else nip fi ;

fn max (int int --- int) let x y in x y > x y ? end ;

fn min (int int --- int) let x y in x y < x y ? end ;



// Helper function for Logical And operator (&&).
// Calling:
//   - <bool1> <bool2> and
// Returns:
//   - A boolean value. `true` if both given values are true, `false` if one or
//     more are false.
//fn and (bool bool --- bool) swap int swap int + 2 = ;

// Helper function for Logical Or operator (||).
// Calling:
//   - <bool1> <bool2> or
// Returns:
//   - A boolean value. `true` if at least of the given values is true.
//fn or (bool bool --- bool) swap int swap int + 0 > ;

// Helper function to calculate the difference between 2 pointers.
// Calling:
//   - <pointer1> <pointer2> ptrdiff
// Returns:
//   - <int> with the difference between the given pointers.
//fn ptrdiff (ptr ptr --- int) swap int swap int - ;
