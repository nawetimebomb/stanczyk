;; Run this demo with `skc run demo/00-stanczyk`

;;
;;            ¿«fº"└└-.`└└*∞▄_              ╓▄∞╙╙└└└╙╙*▄▄
;;         J^. ,▄▄▄▄▄▄_      └▀████▄ç    JA▀            └▀v
;;       ,┘ ▄████████████▄¿     ▀██████▄▀└      ╓▄██████▄¿ "▄_
;;      ,─╓██▀└└└╙▀█████████      ▀████╘      ▄████████████_`██▄
;;     ;"▄█└      ,██████████-     ▐█▀      ▄███████▀▀J█████▄▐▀██▄
;;     ▌█▀      _▄█▀▀█████████      █      ▄██████▌▄▀╙     ▀█▐▄,▀██▄
;;    ▐▄▀     A└-▀▌  █████████      ║     J███████▀         ▐▌▌╙█µ▀█▄
;;  A╙└▀█∩   [    █  █████████      ▌     ███████H          J██ç ▀▄╙█_
;; █    ▐▌    ▀▄▄▀  J█████████      H    ████████          █    █  ▀▄▌
;;  ▀▄▄█▀.          █████████▌           ████████          █ç__▄▀ ╓▀└ ╙%_
;;                 ▐█████████      ▐    J████████▌          .└╙   █¿   ,▌
;;                 █████████▀╙╙█▌└▐█╙└██▀▀████████                 ╙▀▀▀▀
;;                ▐██▀┘Å▀▄A └▓█╓▐█▄▄██▄J▀@└▐▄Å▌▀██▌
;;                █▄▌▄█M╨╙└└-           .└└▀**▀█▄,▌
;;                ²▀█▄▄L_                  _J▄▄▄█▀└
;;                     └╙▀▀▀▀▀MMMR████▀▀▀▀▀▀▀└
;;
;;
;; ███████╗████████╗ █████╗ ███╗   ██╗ ██████╗███████╗██╗   ██╗██╗  ██╗
;; ██╔════╝╚══██╔══╝██╔══██╗████╗  ██║██╔════╝╚══███╔╝╚██╗ ██╔╝██║ ██╔╝
;; ███████╗   ██║   ███████║██╔██╗ ██║██║       ███╔╝  ╚████╔╝ █████╔╝
;; ╚════██║   ██║   ██╔══██║██║╚██╗██║██║      ███╔╝    ╚██╔╝  ██╔═██╗
;; ███████║   ██║   ██║  ██║██║ ╚████║╚██████╗███████╗   ██║   ██║  ██╗
;; ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝

;; Stańczyk is a concatenate and stack-oriented programming language. To write an
;; application, you have to think about it a little bit different than you usually do.

;; Concatenate programming languages are usually written in Reverse Polish Notation
;; (RPN. more info: https://en.wikipedia.org/wiki/Reverse_Polish_notation).
;; At first, this seems difficult to understand, but once you get the grasp of what
;; is happening, it will be pretty easy.


;;  ___       _                 _            _   _
;; |_ _|_ __ | |_ _ __ ___   __| |_   _  ___| |_(_) ___  _ __
;;  | || '_ \| __| '__/ _ \ / _` | | | |/ __| __| |/ _ \| '_ \
;;  | || | | | |_| | | (_) | (_| | |_| | (__| |_| | (_) | | | |
;; |___|_| |_|\__|_|  \___/ \__,_|\__,_|\___|\__|_|\___/|_| |_|


;; As any stack-oriented programming language (a lot of them are), expressions are
;; pushed into the stack. And statements operate over whatever is in the stack.
;; RPN works really well here because we can understand right away what is happening
;; behind the scenes, making programming in Stańczyk a very transparent process.

;; For our first demo, we want to print the number 3. In order for that to happen,
;; we need to first move the number 3 into the stack. That's easy!
3

;; Now the first position of the stack has the number 3. Any other expression
;; literal (like a value) would put that new value into the second position of the
;; stack. We don't want that right now. What we want is to do an operation on that
;; first position of the stack by running a statement.
;; Statements take "stacked" values and do things with them. We have a couple of
;; options here, like print or drop. But we now we want to print it, so:
print

;; And if we run this program, we would see the number 3 on the console.
;; You can write it like this too:
3 print

;; Now that we know the stack and how it works, lets get the number 13 by doing a
;; simple arithmetic operation. Lets sum 4 and 9.
4

;; Now we have 4 in the stack. The first position is taken, but we can use more of
;; the stack to do binary operations.
9

;; We have 4 and 9 on the first and second position respectively. Now, lets do the
;; operation. In general mathematics we do 4 + 9 (infix sign), but in Stanczyk, since
;; we use RPN (postfix sign), then naturally we are just missing the operator sign here.
+

;; Most operations in Stańczyk are binary. That means, it will take the last two
;; stack values, operate over them, and push the result back to the stack. So,
;; naturally, we have 13 now on the stack. We need to do something with it, lets
;; show it on the screen!
print

;; That was easy enough, right? You can also write it like:
;;;; Note: I'm discarding the value because I don't want to show it this time.
4 9 + drop

;; Drop may be useful if we don't care about the stack value. I'm sure you'll find
;; uses for it. Once we go deeper into Stańczyk, you'll see how it can be used in
;; some examples.


;;  _____                    _   _       _
;; | ____|___ ___  ___ _ __ | |_(_) __ _| |___
;; |  _| / __/ __|/ _ \ '_ \| __| |/ _` | / __|
;; | |___\__ \__ \  __/ | | | |_| | (_| | \__ \
;; |_____|___/___/\___|_| |_|\__|_|\__,_|_|___/


;; What is a programming language without variables? Imaginate having to look
;; into the stack all the time? Don't worry, Stańczyk does have variables.
;; They do take advantage of the stack too! When you define one, the
;; expression is evaluated and push to the stack, then saved on a constant
;; table. When you ask for them (by just simply using it for their name),
;; the value will be put into the stack on demand.

;; If you don't define a value for a variable, we got you covered! The default
;; value is 'nil'. This is called "declaring".
;;;; Note: Technically, variables in Stańczyk are called "symbols". You can call
;;;; them whatever you want.
;;;; Note: A symbol name can start with pretty much whatever you want, except numbers,
;;;; though numbers can be used after the first character.

;; You declare a variable by doing:
var declared-symbol
;; Note: don't forget the `.` (dot) at the end! It's telling the compiler that
;; the declaration ends there. The `.` (dot) is used a lot in Stańczyk.

;; And define one by doing
var defined-symbol 13

;; You can also use expressions when defining a variable like:
var defined-symbol (4 9 +)

;; Symbols can store strings too! And after you declare a symbol, you can
;; assign values to it by doing
= declared-symbol "Hello, Stańczyk" .

;; And you can use symbols in statements too:
declared-symbol print     ;; "Hello, Stańczyk"
defined-symbol 13 + print ;; 26

;; These are considered global symbols, because we declared them at top of the
;; scope. You can declare local symbols when inside a scope using the same
;; semantics. Local symbols are usually better because Stańczyk does lexical
;; bindings for them, so those are taking care of during compile-time.

;; A quick block scoping example using the keyword `do` and ending with `.`
;; Note: We re-define "declared-symbol", but the new definition will only
;; affect the local scoping.
do
    := declared-symbol "Bye bye, Stańczyk" .
    declared-symbol print ;; "Bye bye, Stańczyk"
.

;; We cleared the local symbols as soon as we exit the scope, so when we
;; print the symbol again, we will get the global definition.
declared-symbol print     ;; "Hello, Stańczyk"

;; Now that we have had a look into blocks of code, we can learn more about them.
;; Blocks are not also an abstract thing, we use them in other statements like for
;; control flows (if, else) and loops.

;; In control flows, `if` and `else` are the block delimiters, the block ends with a
;; `.` (dot). In loops, `do` acts as the block delimiter which, you guessed it, also
;; ends with a `.` (dot).
;; For the if/else example below:
1 2 == if
  "it's an if!"
else
  "no, it's actually an else!"
.

print    ;; "no, it's actually an else!"

;; In the previous example, we print after leaving the if/else because we have the value
;; on the stack. Don't forget to handle your stack values! (more advance stack manipulation
;; technicques are coming, don't worry)

;; Loops are a little bit different. Stańczyk has infinite and finite loops. You can exit
;; the loop whenever you want with the keyword `quit` (which has to be preceded by a Boolean)
;; The following is an infinite loop that quits at the end.
{} do
    "print me" print
    true quit
.

;; Wow, all that and we just printed "print me" once.
;; The Boolean before quit can come from an evaluation, but `quit` can only be used in the
;; main body of the loop. That means, it cannot be used in other blocks (even if/else).
;; So if you want to do an operation 3 times you will have to do something like:
:= reps 0 .

{} do
    "testing" print
    = reps reps 1 + .
    reps 3 >= quit
.

;; The above prints:
;; "testing"
;; "testing"
;; "testing"

;; But you could have done it a little bit different if you already knew you wanted a finite
;; loop. Maybe:
:= index 0 .

{index 3 <} do
    "finite loop" print
    = index index 1 + .
.

;; And the above prints:
;; "finite loop"
;; "finite loop"
;; "finite loop"

;; To make it one sentence: If the statement inside the `{` and `}` brackets evaluates to true
;; then `do`.
;; In the empty brackets `{}` example, the compiler will take that as an implicit `true`, but
;; you could actually write `{true} do` if you want.


;;   ___                       _   _
;;  / _ \ _ __   ___ _ __ __ _| |_(_) ___  _ __  ___
;; | | | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
;; | |_| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
;;  \___/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
;;       |_|


;; Apart from variables, operations are really useful in programming languages. Stańczyk's
;; standards, with its postfix notations, are pretty simple to understand. Most operations
;; are defined after its operands. We have seen the example of doing a sum of 2 operands. What
;; happens if we want to sum 3?
2 3 + 8 + print    ;; 13

;; I know what you are thinking: "wait, didn't you say 2 operands???". Well, if we take a look
;; at the stack, we do have to operands here. This is doing the following:
;; put 2 on the stack
;; put 3 on the stack
;; do sum (+). This takes the first and second element of the stack and does the sum. 2 + 3 =
;; put 5 on the stack (the result of the operation)
;; Now that we have 5 on the stack, we can add a second operand.
;; put 8 on the stack
;; do sum(+). 5 + 8 = 13

;; And this works for any operation. You just have to think it in that way. And if you, you will
;; never need parenthesis!
;; Note: In fact, this is how most calculator works!
;; (https://en.wikipedia.org/wiki/Reverse_Polish_notation#Implementations)

;; So let's translate regular arithmetics to RPN:
;; Given the following: ((2 + 1) * 3) = 9
2 1 + 3 * print

;; And: (1 + 2) * 3 + 4 = 13
1 2 + 3 * 4 + print

;; And: (4 + (13 / 5)) = 6.6
13 5 / 4 + print

;; Lastly: (2 / 4) * (5 - 6) = -0.5
2 4 / 5 6 - * print

;; You just have to think about it a little bit differenly, but anything can be done.

;; As we talked about before, most Stańczyk operations are binary. But not all of them! Let's
;; learn more about some unary ones.
;; The first one we are going to learn about is the `neg` operation. neg means negate.
neg 1 print ;; -1

;; This unary operation goes before the expression that is going to affect. This is because it
;; makes it easier to read in long concatenated operations.
;; For example:
neg (1 2 + 5 + 2 3 + + neg 1 *) print   ;; you guessed it! 13
