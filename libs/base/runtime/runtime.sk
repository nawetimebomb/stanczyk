/*
  ;;  The Stańczyk Programming Language  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;                                                                      ;
  ;            ¿«fº"└└-.`└└*∞▄_              ╓▄∞╙╙└└└╙╙*▄▄               ;
  ;         J^. ,▄▄▄▄▄▄_      └▀████▄ç    JA▀            └▀v             ;
  ;       ,┘ ▄████████████▄¿     ▀██████▄▀└      ╓▄██████▄¿ "▄_          ;
  ;      ,─╓██▀└└└╙▀█████████      ▀████╘      ▄████████████_`██▄        ;
  ;     A"▄█└      ,██████████-     ▐█▀      ▄███████▀▀J█████▄▐▀██▄      ;
  ;     ▌█▀      _▄█▀▀█████████      █      ▄██████▌▄▀╙     ▀█▐▄,▀██▄    ;
  ;    ▐▄▀     A└-▀▌  █████████      ║     J███████▀         ▐▌▌╙█µ▀█▄   ;
  ;  A╙└▀█∩   [    █  █████████      ▌     ███████H          J██ç ▀▄╙█_  ;
  ; █    ▐▌    ▀▄▄▀  J█████████      H    ████████          █    █  ▀▄▌  ;
  ;  ▀▄▄█▀.          █████████▌           ████████          █ç__▄▀ ╓▀└╙%_;
  ;                 ▐█████████      ▐    J████████▌          .└╙   █¿  ,▌;
  ;                 █████████▀╙╙█▌└▐█╙└██▀▀████████                 ╙▀▀▀ ;
  ;                ▐██▀┘Å▀▄A └▓█╓▐█▄▄██▄J▀@└▐▄Å▌▀██▌                     ;
  ;                █▄▌▄█M╨╙└└-           .└└▀**▀█▄,▌                     ;
  ;                ²▀█▄▄L_                  _J▄▄▄█▀└                     ;
  ;                     └╙▀▀▀▀▀MMMR████▀▀▀▀▀▀▀└                          ;
  ;                                                                      ;
  ;                                                                      ;
  ; ███████╗████████╗ █████╗ ███╗   ██╗ ██████╗███████╗██╗   ██╗██╗  ██╗ ;
  ; ██╔════╝╚══██╔══╝██╔══██╗████╗  ██║██╔════╝╚══███╔╝╚██╗ ██╔╝██║ ██╔╝ ;
  ; ███████╗   ██║   ███████║██╔██╗ ██║██║       ███╔╝  ╚████╔╝ █████╔╝  ;
  ; ╚════██║   ██║   ██╔══██║██║╚██╗██║██║      ███╔╝    ╚██╔╝  ██╔═██╗  ;
  ; ███████║   ██║   ██║  ██║██║ ╚████║╚██████╗███████╗   ██║   ██║  ██╗ ;
  ; ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ;
  ;                                                                      ;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  The Stańczyk Programming Language  ;;

  The Stańczyk Runtime Library

  The Runtime library is automatically loaded into any program created
  with Stańczyk by the compiler.
*/

// Maximum Values for Signed Integers (int)
const MAX_INT8  int 127 ;
const MAX_INT16 int 32_767 ;
const MAX_INT32 int 2_147_483_647 ;
const MAX_INT64 int 9_223_372_036_854_775_807 ;

// Minimum Values for Signed Integers (int)
const MIN_INT8  int -128 ;
const MIN_INT16 int -32_768 ;
const MIN_INT32 int -2_147_483_648 ;
const MIN_INT64 int -9_223_372_036_854_775_808 ;

// Maximum Values for Unsigned Integers (uint)
const MAX_UINT8  uint 255u ;
const MAX_UINT16 uint 65_535u ;
const MAX_UINT32 uint 4_294_967_295u ;
const MAX_UINT64 uint 18_446_744_073_709_551_615u ;

/*
  Removes the last two elements from the stack.
*/
fn 2drop (any any) drop drop ;

/*
 Duplicates the last two elements on the stack, keeping the same ordering
 for the group of two elements.
*/
fn 2dup (x y --- x y x y) over over ;

/*
  Duplicates the last two elements on the stack, just after each element.
*/
fn 2dup* (x y --- x x y y) over swap dup ;

/*
  Counts the number of characters in a string.
*/
fn len (string --- int) 0 swap for c in 1 + loop ;

/*
  Counts the number of characters in a number.
*/
fn len (int --- int) 0 swap 0 > for x in 1 + x 10 / set* loop ;

/*
  Returns the first element after `bool` if it's true or the second element
  if it's false.
*/
fn ? (bool x x --- x) rot if drop else nip fi ;

/*
  Returns the highest integer from the two given integers.
*/
fn max (int int --- int) 2dup > rot* ? ;

/*
  Returns the lowest integer from the two given integers.
*/
fn min (int int --- int) 2dup < rot* ? ;

/*
  Returns the negated boolean.
*/
fn not (bool --- bool) false true ? ;

/*
  Returns true if last two elements on the stack are true,
  false if one or both are false.
*/
fn and (bool bool --- bool) over ? ;

/*
  Returns true if at least one of the last two elements is true.
*/
fn or (bool bool --- bool) dup* ? ;

/*
  Returns true if one of the elements is true, if both are true,
  or false, returns false.
*/
fn xor (bool bool --- bool) dup if false swap ? else drop fi ;
