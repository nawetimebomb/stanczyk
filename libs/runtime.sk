;;  The Stańczyk Programming Language  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                      ;
;            ¿«fº"└└-.`└└*∞▄_              ╓▄∞╙╙└└└╙╙*▄▄               ;
;         J^. ,▄▄▄▄▄▄_      └▀████▄ç    JA▀            └▀v             ;
;       ,┘ ▄████████████▄¿     ▀██████▄▀└      ╓▄██████▄¿ "▄_          ;
;      ,─╓██▀└└└╙▀█████████      ▀████╘      ▄████████████_`██▄        ;
;     ;"▄█└      ,██████████-     ▐█▀      ▄███████▀▀J█████▄▐▀██▄      ;
;     ▌█▀      _▄█▀▀█████████      █      ▄██████▌▄▀╙     ▀█▐▄,▀██▄    ;
;    ▐▄▀     A└-▀▌  █████████      ║     J███████▀         ▐▌▌╙█µ▀█▄   ;
;  A╙└▀█∩   [    █  █████████      ▌     ███████H          J██ç ▀▄╙█_  ;
; █    ▐▌    ▀▄▄▀  J█████████      H    ████████          █    █  ▀▄▌  ;
;  ▀▄▄█▀.          █████████▌           ████████          █ç__▄▀ ╓▀└╙%_;
;                 ▐█████████      ▐    J████████▌          .└╙   █¿  ,▌;
;                 █████████▀╙╙█▌└▐█╙└██▀▀████████                 ╙▀▀▀ ;
;                ▐██▀┘Å▀▄A └▓█╓▐█▄▄██▄J▀@└▐▄Å▌▀██▌                     ;
;                █▄▌▄█M╨╙└└-           .└└▀**▀█▄,▌                     ;
;                ²▀█▄▄L_                  _J▄▄▄█▀└                     ;
;                     └╙▀▀▀▀▀MMMR████▀▀▀▀▀▀▀└                          ;
;                                                                      ;
;                                                                      ;
; ███████╗████████╗ █████╗ ███╗   ██╗ ██████╗███████╗██╗   ██╗██╗  ██╗ ;
; ██╔════╝╚══██╔══╝██╔══██╗████╗  ██║██╔════╝╚══███╔╝╚██╗ ██╔╝██║ ██╔╝ ;
; ███████╗   ██║   ███████║██╔██╗ ██║██║       ███╔╝  ╚████╔╝ █████╔╝  ;
; ╚════██║   ██║   ██╔══██║██║╚██╗██║██║      ███╔╝    ╚██╔╝  ██╔═██╗  ;
; ███████║   ██║   ██║  ██║██║ ╚████║╚██████╗███████╗   ██║   ██║  ██╗ ;
; ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝ ;
;                                                                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  The Stańczyk Programming Language  ;;

;; The Stańczyk Runtime Library
; Note: The Runtime library is automatically loaded into any program created
; with Stańczyk by the compiler. Some definitions and documentation provided
; are also defined within the compiler itself.

;;; Compiler-Defined Constants

;; Operating System
; bool OS_LINUX   - True if program is running on Linux.
; bool OS_MAC     - True if program is running on Mac.
; bool OS_WINDOWS - True if program is running on Windows.

;; Stańczyk Internals
; bool SK_DEBUG   - True if program is compiled with `-debug` switch.
; bool SK_TEST    - True if program is running in test mode (`skc test`)
; str  SK_VERSION - The Stańczyk Compiler version (`skc version`)

;; Maximum Values for Signed Integers (int).
const MAX_INT8     127
const MAX_INT16    32767
const MAX_INT32    2147483647
const MAX_INT64    9223372036854775807

;; Minimum Values for Signed Integers (int).
; const MIN_INT8     -128
; const MIN_INT16    -32768
; const MIN_INT32    -2147483648
; const MIN_INT64    -9223372036854775808

;; Maximum Values for Unsigned Integers (uint).
const MAX_UINT8  255
const MAX_UINT16 65535
const MAX_UINT32 4294967295
const MAX_UINT64 18446744073709551615

; Helper function to increment a number or a pointer position by 1.
; Calling:
;   - <int/pointer> ++
; Returns:
;   - The given argument + 1
fn ++ ($X --- X)
	1 +
ret

; Helper function to decrement a number or a pointer position by 1.
; Calling:
;   - <int/pointer> --
; Returns:
;   - The given argument - 1.
fn -- ($X --- X)
	1 -
ret

; Removes one value from the stack
; Calling
;   - <any value> drop
fn drop (any)
	bind (x)
ret

; Removes two values from the stack
; Calling
;   - <any> <any> 2drop
fn 2drop (any any)
	bind (x y)
ret

; Removes the second to last value from the stack
; Calling:
;		- <arg1> <arg2> nip
; Returns
;		- The second given argument (<arg2>)
fn nip ($X $Y --- Y)
	bind (x y) y
ret

; Duplicate the last value on the stack
; Calling:
;   - <any> dup
; Returns:
;   - The given argument, twice
fn dup ($X --- X X)
	bind (x) x x
ret

; Duplicate the last 2 values on the stack
; Calling:
;   - <arg1> <arg2> 2dup
; Returns:
;   - The 2 given arguments, twice
fn 2dup ($X $Y --- X Y X Y)
	bind (x y) x y x y
ret

; Duplicates the second to last value on the stack and add it at the end
; Calling:
;   - <arg1> <arg2> over
; Returns:
;   - The given arguments, plus <arg1> duplicated at the end (<arg1> <arg2> <arg1>)
fn over ($X $Y --- X Y X)
	bind (x y) x y x
ret

; Takes the last two values in the stack and swap them in order
; Calling:
;   - <arg1> <arg2> swap
; Returns:
;   - The given argument in opposite order (<arg2> <arg1>)
fn swap ($X $Y --- Y X)
	bind (x y) y x
ret

; Helper function for Logical And operator (&&).
; Calling:
;   - <bool1> <bool2> and
; Returns:
;   - A boolean value. `true` if both given values are true, `false` if one or
;     more are false.
fn and (bool bool --- bool)
	swap ->int
	swap ->int
	+ 2 =
ret

; Helper function for Logical Or operator (||).
; Calling:
;   - <bool1> <bool2> or
; Returns:
;   - A boolean value. `true` if at least of the given values is true.
fn or (bool bool --- bool)
	swap ->int
	swap ->int
	+ 0 >
ret

; Helper function to calculate the difference between 2 pointers.
; Calling:
;   - <pointer1> <pointer2> ptrdiff
; Returns:
;   - <int> with the difference between the given pointers.
fn ptrdiff (ptr ptr --- int)
	swap ->int
	swap ->int
	-
ret
